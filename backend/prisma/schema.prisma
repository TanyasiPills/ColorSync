// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @db.VarChar(24)
  email String @unique
  password String
  profile_picture String?
  profile_description String?

  posts Post[]
  images Image[]
  comments Comment[]
  tokens Token[]

  likes Post[] @relation("LikedPosts")
}

model Post {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  userId Int
  image Image? @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  imageId Int?
  text String @db.VarChar(500)
  date DateTime @default(now())
  imageForPost Boolean @default(false)
  likes Int @default(0)

  likedBy User[] @relation("LikedPosts")
  tags Tag[]

  comments Comment[]
}

model Tag {
  name String @id @unique

  posts Post[]
}

model Comment {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  postId Int
  text String @db.VarChar(500)
  date DateTime @default(now())
}

model Image {
  id Int @id @default(autoincrement())
  path String
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  userId Int
  visibility Visibility @default(private)
  date DateTime @default(now())
  forPost Boolean @default(false)

  posts Post[]
}

model Token {
  token String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
}

enum Visibility {
  public
  private
}
