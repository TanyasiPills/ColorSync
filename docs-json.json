{
    "openapi": "3.0.0",
    "paths": {
        "/users/login": {
            "post": {
                "operationId": "UsersController_login",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginBodyType"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginResponseType"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials"
                    }
                },
                "summary": "Login for the user",
                "tags": [
                    "Users"
                ]
            }
        },
        "/users": {
            "post": {
                "operationId": "UsersController_create",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginResponseType"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Email already in use"
                    }
                },
                "summary": "Creates a user, email must be unique",
                "tags": [
                    "Users"
                ]
            },
            "get": {
                "operationId": "UsersController_getLoggedIn",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Returns data about the currently logged in user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInfoType"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Returns data about the currently logged in user",
                "tags": [
                    "Users"
                ]
            },
            "patch": {
                "operationId": "UsersController_update",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns the updated user data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInfoType"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Updates the user data",
                "tags": [
                    "Users"
                ]
            },
            "delete": {
                "operationId": "UsersController_remove",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "401": {
                        "description": "Invalid token"
                    },
                    "500": {
                        "description": "Failed to delete the user"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Delets the user",
                "tags": [
                    "Users"
                ]
            }
        },
        "/users/pfp": {
            "post": {
                "operationId": "UsersController_uploadPfp",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "description": "Profile picture to upload",
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/FileType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Profile picture uploaded"
                    },
                    "401": {
                        "description": "Invalid token"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Upload a profile picture for the user",
                "tags": [
                    "Users"
                ]
            }
        },
        "/users/{id}/pfp": {
            "get": {
                "operationId": "UsersController_getPfp",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Id of the user",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the profile picture of the user"
                    },
                    "404": {
                        "description": "Image not found"
                    }
                },
                "summary": "Gets the profile picture of a specific user",
                "tags": [
                    "Users"
                ]
            }
        },
        "/users/search": {
            "get": {
                "operationId": "UsersController_search",
                "parameters": [
                    {
                        "name": "name",
                        "required": true,
                        "in": "query",
                        "description": "Name of the user",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the users that match the search",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserInfoType"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Search for a user",
                "tags": [
                    "Users"
                ]
            }
        },
        "/users/{id}": {
            "get": {
                "operationId": "UsersController_findOne",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Id of the user",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the user data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInfoType"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "summary": "Returns data about a specific user",
                "tags": [
                    "Users"
                ]
            }
        },
        "/posts": {
            "post": {
                "operationId": "PostsController_create",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePostDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Post sucessfully created"
                    },
                    "401": {
                        "description": "Invalid token"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Create a post from the logged in user",
                "tags": [
                    "Posts"
                ]
            },
            "get": {
                "operationId": "PostsController_findAll",
                "parameters": [
                    {
                        "name": "lastId",
                        "required": false,
                        "in": "query",
                        "description": "The id of the last post you got",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the posts and the last id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PostIncludesType"
                                            }
                                        },
                                        "lastId": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Returns all of the posts",
                "tags": [
                    "Posts"
                ]
            }
        },
        "/posts/user/{id}": {
            "get": {
                "operationId": "PostsController_findByUser",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The id of the user",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the posts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PostIncludesType"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Returns all of the posts created by a specific user",
                "tags": [
                    "Posts"
                ]
            }
        },
        "/posts/{id}": {
            "get": {
                "operationId": "PostsController_findOne",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The id of the post",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the post",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostIncludesType"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Post not found"
                    }
                },
                "summary": "Returns one post based on it's id",
                "tags": [
                    "Posts"
                ]
            },
            "patch": {
                "operationId": "PostsController_update",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The id of the post",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePostDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The post was successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostBaseType"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token"
                    },
                    "404": {
                        "description": "There is not post with that id or the user can't update it"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Update a specific post create by the user",
                "tags": [
                    "Posts"
                ]
            },
            "delete": {
                "operationId": "PostsController_remove",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The id of the post",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The post was successfully deleted"
                    },
                    "401": {
                        "description": "Invalid token"
                    },
                    "404": {
                        "description": "There is no post with that id or the user can't delete it"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Deletes a specific post",
                "tags": [
                    "Posts"
                ]
            }
        },
        "/images": {
            "post": {
                "operationId": "ImagesController_create",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "description": "The ",
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ImageCreateType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Image uploaded"
                    },
                    "401": {
                        "description": "Invalid token"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Uploades a image",
                "tags": [
                    "Images"
                ]
            }
        },
        "/images/user/{id}": {
            "get": {
                "operationId": "ImagesController_findAll",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The id of the user",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns all the images",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ImageType"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token"
                    },
                    "404": {
                        "description": "User not foud"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Returns the images uploaded by a specific user that the requresting user has access to",
                "tags": [
                    "Images"
                ]
            }
        },
        "/images/public/{id}": {
            "get": {
                "operationId": "ImagesController_findPublic",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The id of the image",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the image file"
                    },
                    "401": {
                        "description": "The image is private"
                    },
                    "404": {
                        "description": "Image not found"
                    }
                },
                "summary": "Returns a public image file",
                "tags": [
                    "Images"
                ]
            }
        },
        "/images/{id}": {
            "get": {
                "operationId": "ImagesController_findOne",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The id of the image",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the image file"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Image not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Returns the image file",
                "tags": [
                    "Images"
                ]
            },
            "delete": {
                "operationId": "ImagesController_remove",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The id of the image",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Image successfully deleted"
                    },
                    "401": {
                        "description": "Invalid token"
                    },
                    "404": {
                        "description": "Image not found, or the user can't delete that image"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Deletes a image",
                "tags": [
                    "Images"
                ]
            },
            "patch": {
                "operationId": "ImagesController_update",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The id of the image",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateImageDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image data succesfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImageType"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token"
                    },
                    "404": {
                        "description": "Image not found that the user can delete"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Updates data about a image",
                "tags": [
                    "Images"
                ]
            }
        },
        "/comments": {
            "post": {
                "operationId": "CommentsController_create",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCommentDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created"
                    },
                    "401": {
                        "description": "Invalid token"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Creates a comment",
                "tags": [
                    "Comments"
                ]
            }
        },
        "/comments/post/{id}": {
            "get": {
                "operationId": "CommentsController_findAllOnPost",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The id of the post",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns all the comments on the post",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommentType"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Post with the specified id doesn't exist"
                    }
                },
                "summary": "Returns all comments on a post",
                "tags": [
                    "Comments"
                ]
            }
        },
        "/comments/{id}": {
            "get": {
                "operationId": "CommentsController_findOne",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The id of the comment",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the commnet",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentType"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Comment not found"
                    }
                },
                "summary": "Returns a specific comment",
                "tags": [
                    "Comments"
                ]
            },
            "patch": {
                "operationId": "CommentsController_update",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The id of the comment",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCommentDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Comment succsesfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentType"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token"
                    },
                    "404": {
                        "description": "Comment not found, or the user can't edit it"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Upadtes a comment",
                "tags": [
                    "Comments"
                ]
            },
            "delete": {
                "operationId": "CommentsController_remove",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The id of the comment",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Comment successfully deleted"
                    },
                    "401": {
                        "description": "Invalid token"
                    },
                    "404": {
                        "description": "Comment not found, or the user can't delete it"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "summary": "Deletes a comment",
                "tags": [
                    "Comments"
                ]
            }
        }
    },
    "info": {
        "title": "ColorSync",
        "description": "",
        "version": "1.0.0",
        "contact": {}
    },
    "tags": [
        {
            "name": "socket.io",
            "description": "WebSocket endpoints",
            "externalDocs": {
                "url": "/docs/websocket",
                "description": "Websocket documentation."
            }
        }
    ],
    "servers": [],
    "components": {
        "securitySchemes": {
            "bearer": {
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "type": "http"
            }
        },
        "schemas": {
            "LoginBodyType": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "The email of the user",
                        "example": "example@example.com"
                    },
                    "password": {
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 24,
                        "description": "The password of the user",
                        "example": "secret password"
                    }
                },
                "required": [
                    "email",
                    "password"
                ]
            },
            "LoginResponseType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "The id of the user",
                        "example": 1
                    },
                    "username": {
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 24,
                        "description": "The username of the user",
                        "example": "bob"
                    },
                    "access_token": {
                        "type": "string",
                        "description": "The JWT token",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cKS6IkpXVCJ9.eyJ1c2VybmFtZSI6Im12YSIsInN1YiI6MSwiaWF0IjoxNzM5MDEwNzqwfQ.Ad-wyV-wtagv5vKZIVduMS977gUqIStLMT3RGoDAqAQ"
                    }
                },
                "required": [
                    "id",
                    "username",
                    "access_token"
                ]
            },
            "CreateUserDto": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 24
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 24
                    }
                },
                "required": [
                    "username",
                    "email",
                    "password"
                ]
            },
            "FileType": {
                "type": "object",
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary"
                    }
                },
                "required": [
                    "file"
                ]
            },
            "UserInfoType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "The id of the user",
                        "example": 1
                    },
                    "username": {
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 24,
                        "description": "The username of the user",
                        "example": "bob"
                    }
                },
                "required": [
                    "id",
                    "username"
                ]
            },
            "UpdateUserDto": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 24
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 24
                    }
                }
            },
            "CreatePostDto": {
                "type": "object",
                "properties": {
                    "imageId": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "The id of the image",
                        "example": 1
                    },
                    "text": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 500,
                        "description": "The text of the post",
                        "example": "Hello!"
                    }
                },
                "required": [
                    "text"
                ]
            },
            "CommentType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "minimum": 1,
                        "description": "The id of the comment",
                        "examples": [
                            1,
                            2,
                            3
                        ]
                    },
                    "text": {
                        "type": "string",
                        "description": "The text of the comment",
                        "examples": [
                            "Hello world!",
                            "This is a comment"
                        ]
                    },
                    "date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The date the comment was created",
                        "examples": [
                            "2021-01-01T00:00:00.000Z",
                            "2025-01-08:01:10.252Z"
                        ]
                    },
                    "userId": {
                        "type": "number",
                        "minimum": 1,
                        "description": "The id of the user that created the comment",
                        "examples": [
                            1,
                            2,
                            3
                        ]
                    },
                    "user": {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "username"
                        ]
                    }
                },
                "required": [
                    "id",
                    "text",
                    "date",
                    "userId",
                    "user"
                ]
            },
            "PostIncludesType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "minimum": 1,
                        "description": "The id of the post",
                        "examples": [
                            1,
                            2,
                            3
                        ]
                    },
                    "text": {
                        "type": "string",
                        "description": "The text of the post",
                        "examples": [
                            "Hello world!",
                            "This is a post"
                        ]
                    },
                    "date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The date the post was created",
                        "examples": [
                            "2021-01-01T00:00:00.000Z",
                            "2025-01-08:01:10.252Z"
                        ]
                    },
                    "userId": {
                        "type": "number",
                        "minimum": 1,
                        "description": "The id of the user that created the post",
                        "examples": [
                            1,
                            2,
                            3
                        ]
                    },
                    "imageId": {
                        "type": "number",
                        "minimum": 1,
                        "description": "The id of the image that is attached to the post",
                        "examples": [
                            1,
                            2,
                            3
                        ]
                    },
                    "user": {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "username"
                        ]
                    },
                    "comments": {
                        "description": "The comments on the post",
                        "examples": [
                            [
                                {
                                    "id": 1,
                                    "text": "Hello, Bob",
                                    "date": "2025-02-09T16:30:16.262Z",
                                    "userId": 2,
                                    "user": {
                                        "username": "William"
                                    }
                                }
                            ],
                            []
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommentType"
                        }
                    }
                },
                "required": [
                    "id",
                    "text",
                    "date",
                    "userId",
                    "user",
                    "comments"
                ]
            },
            "UpdatePostDto": {
                "type": "object",
                "properties": {
                    "imageId": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "The id of the image",
                        "example": 1
                    },
                    "text": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 500,
                        "description": "The text of the post",
                        "example": "Hello!"
                    }
                }
            },
            "PostBaseType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "minimum": 1,
                        "description": "The id of the post",
                        "examples": [
                            1,
                            2,
                            3
                        ]
                    },
                    "text": {
                        "type": "string",
                        "description": "The text of the post",
                        "examples": [
                            "Hello world!",
                            "This is a post"
                        ]
                    },
                    "date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The date the post was created",
                        "examples": [
                            "2021-01-01T00:00:00.000Z",
                            "2025-01-08:01:10.252Z"
                        ]
                    },
                    "userId": {
                        "type": "number",
                        "minimum": 1,
                        "description": "The id of the user that created the post",
                        "examples": [
                            1,
                            2,
                            3
                        ]
                    },
                    "imageId": {
                        "type": "number",
                        "minimum": 1,
                        "description": "The id of the image that is attached to the post",
                        "examples": [
                            1,
                            2,
                            3
                        ]
                    }
                },
                "required": [
                    "id",
                    "text",
                    "date",
                    "userId"
                ]
            },
            "ImageCreateType": {
                "type": "object",
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The visibility of the image",
                        "examples": [
                            "public",
                            "private"
                        ],
                        "enum": [
                            "public",
                            "private"
                        ]
                    }
                },
                "required": [
                    "file"
                ]
            },
            "ImageType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "minimum": 1,
                        "description": "The id of the image",
                        "examples": [
                            1,
                            2,
                            3
                        ]
                    },
                    "userId": {
                        "type": "number",
                        "minimum": 1,
                        "description": "The id of the user that created the image",
                        "examples": [
                            1,
                            2,
                            3
                        ]
                    },
                    "date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The date the image was created",
                        "examples": [
                            "2021-01-01T00:00:00.000Z",
                            "2025-01-08:01:10:252Z"
                        ]
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The visibility of the image",
                        "examples": [
                            "public",
                            "private"
                        ],
                        "enum": [
                            "public",
                            "private"
                        ]
                    }
                },
                "required": [
                    "id",
                    "userId",
                    "date",
                    "visibility"
                ]
            },
            "CreateImageDto": {
                "type": "object",
                "properties": {
                    "visibility": {
                        "type": "string",
                        "description": "The visibility of the image",
                        "examples": [
                            "public",
                            "private"
                        ],
                        "enum": [
                            "public",
                            "private"
                        ]
                    }
                }
            },
            "CreateCommentDto": {
                "type": "object",
                "properties": {
                    "postId": {
                        "type": "number",
                        "minimum": 0
                    },
                    "text": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 500
                    }
                },
                "required": [
                    "postId",
                    "text"
                ]
            },
            "UpdateCommentDto": {
                "type": "object",
                "properties": {
                    "postId": {
                        "type": "number",
                        "minimum": 0
                    },
                    "text": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 500
                    }
                }
            }
        }
    }
}